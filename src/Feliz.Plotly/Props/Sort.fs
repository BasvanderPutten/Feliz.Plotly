namespace Feliz.Plotly

(*////////////////////////////////
/// THIS FILE IS AUTO-GENERATED //
////////////////////////////////*)

open Fable.Core
open Fable.Core.JsInterop
open Feliz

[<Erase>]
type sort =
    /// Determines whether this sort transform is enabled or disabled.
    static member inline enabled (value: bool) = Interop.mkSortAttr "enabled" value
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (value: string) = Interop.mkSortAttr "target" value
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<string>) = Interop.mkSortAttr "target" (values |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<string option>) = Interop.mkSortAttr "target" (values |> Seq.map Bindings.optToString |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<string>>) = Interop.mkSortAttr "target" (values |> Seq.map ResizeArray |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<string option>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<string list>) = Interop.mkSortAttr "target" (values |> Seq.map ResizeArray |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<string option list>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<string []>) = Interop.mkSortAttr "target" (values |> Seq.map ResizeArray |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<string option []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<int>) = Interop.mkSortAttr "target" (values |> Seq.map string |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<int option>) = Interop.mkSortAttr "target" (values |> Seq.map Bindings.optToString |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<int>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<int option>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<int list>) = Interop.mkSortAttr "target" (values |> Seq.map (List.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<int option list>) = Interop.mkSortAttr "target" (values |> Seq.map (List.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<int []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<int option []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<float>) = Interop.mkSortAttr "target" (values |> Seq.map string |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<float option>) = Interop.mkSortAttr "target" (values |> Seq.map Bindings.optToString |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<float>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<float option>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<float list>) = Interop.mkSortAttr "target" (values |> Seq.map (List.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<float option list>) = Interop.mkSortAttr "target" (values |> Seq.map (List.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<float []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<float option []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<System.DateTime>) = Interop.mkSortAttr "target" (values |> Seq.map string |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<System.DateTime option>) = Interop.mkSortAttr "target" (values |> Seq.map Bindings.optToString |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<bool>) = Interop.mkSortAttr "target" (values |> Seq.map string |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<bool option>) = Interop.mkSortAttr "target" (values |> Seq.map Bindings.optToString |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<bool>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<seq<bool option>>) = Interop.mkSortAttr "target" (values |> Seq.map (Seq.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<bool list>) = Interop.mkSortAttr "target" (values |> Seq.map (List.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<bool option list>) = Interop.mkSortAttr "target" (values |> Seq.map (List.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<bool []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map string >> ResizeArray) |> ResizeArray)
    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    static member inline target (values: seq<bool option []>) = Interop.mkSortAttr "target" (values |> Seq.map (Array.map Bindings.optToString >> ResizeArray) |> ResizeArray)
    /// Sets the source reference on Chart Studio Cloud for  target .
    static member inline targetsrc (value: string) = Interop.mkSortAttr "targetsrc" value

[<RequireQualifiedAccess>]
module sort =
    /// Sets the sort transform order.
    [<Erase>]
    type order =
        static member inline ascending = Interop.mkSortAttr "order" "ascending"
        static member inline descending = Interop.mkSortAttr "order" "descending"

    /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
    [<Erase>]
    type target =
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline i = Interop.mkSortAttr "target" "i"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline j = Interop.mkSortAttr "target" "j"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline k = Interop.mkSortAttr "target" "k"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline u = Interop.mkSortAttr "target" "u"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline v = Interop.mkSortAttr "target" "v"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline w = Interop.mkSortAttr "target" "w"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline x = Interop.mkSortAttr "target" "x"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline y = Interop.mkSortAttr "target" "y"
        /// Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.
        static member inline z = Interop.mkSortAttr "target" "z"

